### Constants

# Error types
General        = "GeneralError"
Type           = "TypeError"
IO             = "IOError"
OutOfBounds    = "OutOfBoundsError"
NotFound       = "NotFoundError"
Syntax         = "SyntaxError"
NotImplemented = "NotImplementedError"

### Error classes

# The base class of all errors
class Error {}

class GeneralError extends Error {
  init $saying {
    self.tag = General
    self.msg = saying
  }
}

class TypeError extends Error {
  init $saying {
    self.tag = Type
    self.msg = saying
  }
}

class IOError extends Error {
  init $saying {
    self.tag = IO
    self.msg = saying
  }
}

class OutOfBoundsError extends Error {
  init $saying {
    self.tag = OutOfBounds
    self.msg = saying
  }
}

class NotFoundError extends Error {
  init $saying {
    self.tag = NotFound
    self.msg = saying
  }
}

class SyntaxError extends Error {
  init $saying {
    self.tag = Syntax
    self.msg = saying
  }
}

class NotImplementedError extends Error {
  init $saying {
    self.tag = NotImplemented
    self.msg = saying
  }
}


### Functions

# Misc
def $obj is truthy {
  if (obj) { true } else { false }
}

def new line {
  print ""
}


# Collections
def len $collection {
  left fold $collection with { |acc, _| -> acc + 1 } from 0
}

def append $item to $collection {
  collection + [item]
}

def range $collection {
  \0 to (len $collection)
}

def $collection contains $item {
  left fold $collection with { |acc, o| -> acc || o == item } from (false)
}


# Maths
def square root of $n {
  n ** (1 / 2)
}

def $root st root of $n {
  n ** (1 / root)
}

def $root nd root of $n {
  n ** (1 / root)
}

def $root rd root of $n {
  n ** (1 / root)
}

def $root th root of $n {
  n ** (1 / root)
}
